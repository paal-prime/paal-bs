diff -crB blossom5-v2.04.src/GEOM/GeomPerfectMatching.h blossom5/GEOM/GeomPerfectMatching.h
*** blossom5-v2.04.src/GEOM/GeomPerfectMatching.h	2013-05-05 00:36:21.000000000 +0200
--- blossom5/GEOM/GeomPerfectMatching.h	2013-05-27 09:23:45.222975318 +0200
***************
*** 26,39 ****
  #include <math.h>
  #include "../PerfectMatching.h"
  
! //#define DELAUNAY_TRIANGLE
  
  struct GPMKDTree;
  
  class GeomPerfectMatching
  {
  public:
! 	typedef int REAL; // if you change it to double, you should also change PerfectMatching::REAL to double!
  	typedef int PointId;
  
  	// pointNum must be a positive even number.
--- 26,39 ----
  #include <math.h>
  #include "../PerfectMatching.h"
  
! #define DELAUNAY_TRIANGLE 1
  
  struct GPMKDTree;
  
  class GeomPerfectMatching
  {
  public:
! 	typedef double REAL; // if you change it to double, you should also change PerfectMatching::REAL to double!
  	typedef int PointId;
  
  	// pointNum must be a positive even number.
***************
*** 55,61 ****
  	// options for Solve()
  	struct GPMOptions
  	{
! 		GPMOptions() : init_Delaunay(true), init_KNN(0), init_greedy(true), iter_max(0) {}
  
  		// three variables below determine the initial subset of edges. 
  		// Delaunay initialization seems to be more robust than K nearest neighbors
--- 55,62 ----
  	// options for Solve()
  	struct GPMOptions
  	{
! 		GPMOptions() : init_Delaunay(true), init_KNN(0), init_greedy(true), iter_max(0),
! 		               euc_2d(false), ceil_2d(false), att_2d(false) {}
  
  		// three variables below determine the initial subset of edges. 
  		// Delaunay initialization seems to be more robust than K nearest neighbors
***************
*** 69,74 ****
--- 70,78 ----
  		int		iter_max;   // If iter_max <= 0 then adds subsets of edges until an optimal solution is found.
  				            // Otherwise runs at most iter_max iterations, so the solution may be suboptimal. 
  				            // (iter_max=1 runs perfect matching just for the initial subset).
+ 		bool	euc_2d;
+ 		bool  ceil_2d;
+ 		bool  att_2d;
  	};
  	struct PerfectMatching::Options options;
  	struct GPMOptions gpm_options;
***************
*** 165,171 ****
  inline GeomPerfectMatching::REAL GeomPerfectMatching::Dist(REAL* coord1, REAL* coord2)
  {
  	REAL dist;
! 	GPM_GET_DIST (dist,  coord1, coord2);
  	return dist; 
  }
  
--- 169,181 ----
  inline GeomPerfectMatching::REAL GeomPerfectMatching::Dist(REAL* coord1, REAL* coord2)
  {
  	REAL dist;
! 	if (gpm_options.euc_2d) {
! 		GPM_GET_DIST (dist,  coord1, coord2);
! 	} else if(gpm_options.ceil_2d) {
! 		dist = ceil(sqrt((coord1[0] - coord2[0])*(coord1[0] - coord2[0])+(coord1[1] - coord2[1])*(coord1[1] - coord2[1])));
! 	} else if(gpm_options.att_2d) {
! 	  dist = ceil(sqrt(((coord1[0] - coord2[0])*(coord1[0] - coord2[0])+(coord1[1] - coord2[1])*(coord1[1] - coord2[1]))/10));
! 	}
  	return dist; 
  }
  
diff -crB blossom5-v2.04.src/GEOM/GPMinit.cpp blossom5/GEOM/GPMinit.cpp
*** blossom5-v2.04.src/GEOM/GPMinit.cpp	2013-05-05 00:36:21.000000000 +0200
--- blossom5/GEOM/GPMinit.cpp	2013-05-27 09:23:45.233974894 +0200
***************
*** 128,134 ****
  #define TRILIBRARY
  #define NO_TIMER
  #define main NO_MAIN_FUNCTION
! #include "../triangle/triangle.c"
  }
  
  void GeomPerfectMatching::InitDelaunay()
--- 128,134 ----
  #define TRILIBRARY
  #define NO_TIMER
  #define main NO_MAIN_FUNCTION
! #include "triangle/triangle.c"
  }
  
  void GeomPerfectMatching::InitDelaunay()
***************
*** 166,172 ****
  	vorout.edgelist = (int *) NULL;
  	vorout.normlist = (REAL *) NULL;
  
! 	triangulate("pczAevn", &in, &out, &vorout);
  
  	free(in.pointlist);
  	free(out.pointlist);
--- 166,172 ----
  	vorout.edgelist = (int *) NULL;
  	vorout.normlist = (REAL *) NULL;
  
! 	triangulate("pczAevnQ", &in, &out, &vorout);
  
  	free(in.pointlist);
  	free(out.pointlist);
diff -crB blossom5-v2.04.src/PerfectMatching.h blossom5/PerfectMatching.h
*** blossom5-v2.04.src/PerfectMatching.h	2013-05-05 07:18:05.000000000 +0200
--- blossom5/PerfectMatching.h	2013-05-27 09:23:45.188976631 +0200
***************
*** 47,59 ****
  {
  public:
  
! #ifdef PERFECT_MATCHING_DOUBLE
  	typedef double REAL; 
  	#define PM_INFTY ((REAL)1e100)
! #else
! 	typedef int REAL;
! 	#define PM_INFTY (INT_MAX/2)
! #endif
  
  	typedef int NodeId;
  	typedef int EdgeId;
--- 47,59 ----
  {
  public:
  
! //#ifdef PERFECT_MATCHING_DOUBLE
  	typedef double REAL; 
  	#define PM_INFTY ((REAL)1e100)
! //#else
! //	typedef int REAL;
! //	#define PM_INFTY (INT_MAX/2)
! //#endif
  
  	typedef int NodeId;
  	typedef int EdgeId;
diff -crB blossom5-v2.04.src/PMinterface.cpp blossom5/PMinterface.cpp
*** blossom5-v2.04.src/PMinterface.cpp	2013-05-05 00:36:21.000000000 +0200
--- blossom5/PMinterface.cpp	2013-05-27 09:23:45.204976013 +0200
***************
*** 128,134 ****
  
  void PerfectMatching::ReallocateEdges()
  {
! 	printf("Warning: reallocating edges. Increasing edge_num_max in the constructor may improve memory efficiency!\n");
  	edge_num_max = edge_num_max*3/2 + 16;
  	char* edges_orig_old = edges_orig;
  	Edge* edges_old = edges;
--- 127,133 ----
  
  void PerfectMatching::ReallocateEdges()
  {
! 	//printf("Warning: reallocating edges. Increasing edge_num_max in the constructor may improve memory efficiency!\n");
  	edge_num_max = edge_num_max*3/2 + 16;
  	char* edges_orig_old = edges_orig;
  	Edge* edges_old = edges;
